//#include "keyboard.h"
#include "console.h"
#include "shell.h"
#include "interrupts.h"
#include "buttons.h"
#include "gpio.h"
#include "gl.h"
#include "timer.h"
#include "printf.h"
#include "malloc.h"
#include "rand.h"

#define NROWS 20
#define NCOLS 40

volatile unsigned int shouldHandleInterrupts = 0;

void menu();
void playTournament();
void level1(int* scores);
void level2(int* scores);
void level3(int* scores);
void set_loading_screen();

void main(void) {
  buttons_init();
  gl_init(1280, 720, 1);
  gl_draw_string(70, 10, "WELCOME TO THE WORST GAME IN THE UNIVERSE! BROUGHT TO YOU BY 107E AND TOO MUCH TIME.", GL_WHITE);
  gl_swap_buffer();
  gl_draw_string(70, 10, "WELCOME TO THE WORST GAME IN THE UNIVERSE! BROUGHT TO YOU BY 107E AND TOO MUCH TIME.", GL_WHITE);
  menu();
}
int handleInterrupts(){
  return shouldHandleInterrupts;
}
void menu_bg(){
  gl_draw_string(450, 100, "ORANGE TO SCROLL, BLUE TO SELECT", GL_WHITE);
  gl_draw_string(550, 300, "PLAY TOURNAMENT", GL_WHITE);
  gl_draw_string(550, 350, "LEVEL 1 - SPEED", GL_WHITE);
  gl_draw_string(530, 400, "LEVEL 2 - REACTION", GL_WHITE);
  gl_draw_string(470, 450, "LEVEL 3 - PRECISION - COMING SOON!", GL_WHITE);
}
void set_loading_screen(){
	  gl_draw_string(1000, 650, "LOADING", GL_RED);
      gl_swap_buffer();
      gl_clear(GL_BLACK);
      gl_swap_buffer();
      gl_clear(GL_BLACK); 
}
void set_countdown(){
  gl_clear(GL_BLACK);
  gl_draw_string(200, 50, "READY YOUR CONTROLLERS, GAME WILL BEGIN IN", GL_WHITE);
  gl_draw_string(630, 350, "3", GL_WHITE);
  gl_swap_buffer();
  //delay_ms(100);
  gl_clear(GL_BLACK);
  gl_draw_string(630, 350, "2", GL_WHITE);
  gl_swap_buffer();
  delay_ms(1900);
  gl_draw_rect(200, 50, 800, 50, GL_BLACK);
  gl_draw_rect(630, 350, 50, 50, GL_BLACK);
  gl_draw_string(630, 350, "1", GL_WHITE);
  gl_swap_buffer();
  delay(2);
  gl_draw_rect(630,350, 20, 20, GL_BLACK);
  gl_swap_buffer();
  gl_draw_rect(630, 350, 20, 20, GL_BLACK);
}
void show_score_screen(int orangePoints, int bluePoints){
  char oPointsString[8];
  char bPointsString[8];
  snprintf(oPointsString, 8, "%d", orangePoints);
  snprintf(bPointsString, 8, "%d", bluePoints);
  gl_draw_string(100, 100, "FIRE POINTS: ", GL_WHITE);
  gl_draw_string(270, 100, oPointsString, GL_AMBER);
  gl_draw_string(100, 150, "ICE POINTS: ", GL_WHITE);
  gl_draw_string(270, 150, bPointsString, GL_BLUE);
  gl_draw_string(100, 600, "Press any button to continue", GL_WHITE);
  gl_swap_buffer();
}
void menu(){
  // GPIO21 is blue, '1', GPIO20 is orange, '0'
  int selectionY = 300;
  gl_clear(GL_BLACK);
  gl_swap_buffer();
  gl_clear(GL_BLACK);
  gl_swap_buffer();
  gl_draw_rect(490, selectionY - 10, 310, 40, GL_BLUE);
  menu_bg();
  gl_swap_buffer();
  menu_bg();
  char buttons = 'x';
  while(1){
    buttons = button_read();
    if(buttons == '0'){
	// scroll
	selectionY += 50;
	gl_swap_buffer();
	gl_draw_rect(490, selectionY - 50 - 10, 310, 40, GL_BLACK);
	if(selectionY > 450){
	  selectionY = 300;
	}
	gl_draw_rect(490, selectionY - 10, 310, 40, GL_BLUE);
	menu_bg();
	gl_swap_buffer();
    }
    else{
	// select
	gl_draw_string(1000, 690, "LOADING", GL_RED);
	gl_swap_buffer();
	if(selectionY == 300){
	  // play tournament
	  playTournament();
	  break;
	}
	else if(selectionY == 350){
	  // level 1
	  int scores[2];
	  level1(scores);
	  break;
	}
	else if(selectionY == 400){
	  // level 2
	  int scores[2];
	  level2(scores);
	  break;
	}
	else{
	  // level 3
	  //int scores[2];
	  //level3(scores);
	  //break;
	}
    }
  }
}

void tournament_instructions(){
  gl_draw_string(100, 150, "WELCOME TO THE ULTIMATE BUTTON WAR TOURNAMENT", GL_WHITE);
  gl_draw_string(100, 200, "YOU WILL FIGHT TO THE DEATH IN TWO GAME MODES", GL_WHITE);
  gl_draw_string(100, 250, "CHALLENGE YOUR OPPONENT'S SPEED AND REACTION", GL_WHITE);
  gl_draw_string(100, 300, "WHOEVER HAS THE HIGHEST POINTS AT THE END WINS", GL_WHITE);
  gl_draw_string(100, 350, "ONE PLAYER WILL BE THE FIRE HERO. PLEASE TAKE THE ORANGE CONTROLLER. FIRE POINTS: 0", GL_WHITE);
  gl_draw_string(100, 400, "THE OTHER SHALL BE THE ICE HERO. PLEASE TAKE THE BLUE CONTROLLER. ICE POINTS: 0", GL_WHITE);
  gl_draw_string(100, 450, "PRESS ANY BUTTON TO BEGIN", GL_WHITE);
}

void turnOffInterrupts(){
  shouldHandleInterrupts = 0;
  while(!isEmpty(1)){
    returnButton1();
  } 
  while(!isEmpty(2)){
    returnButton2();
  }
}

void playTournament(){
  gl_clear(GL_BLACK);
  tournament_instructions();
  gl_swap_buffer();
  gl_clear(GL_BLACK);
  tournament_instructions();
  gl_swap_buffer();
  button_read();
  set_loading_screen();
  int scores[2]; //  blue 0, orange 1 
  level1(scores);
  set_loading_screen();
  show_score_screen(scores[1], scores[0]);
  button_read();
  set_loading_screen();
  level2(scores);
  set_loading_screen();
  gl_draw_string(100, 50, "FINAL TOURNAMENT POINTS", GL_WHITE);
  if(scores[1] > scores[0]){
	gl_draw_string(100, 300, "FIRE WINS", GL_AMBER);
  }
  else if(scores[1] < scores[0]){
	gl_draw_string(100, 300, "ICE WINS", GL_BLUE);
  }
  else{
	gl_draw_string(100, 300, "It's a tie...", GL_WHITE);
  }
  show_score_screen(scores[1], scores[0]);
  
  button_read();
  menu();
}

void level1_instructions(){
  gl_draw_string(200, 200, "WELCOME TO LEVEL 1", GL_WHITE);
  gl_draw_string(200, 250, "THIS IS A COMPETITION OF SPEED", GL_WHITE);
  gl_draw_string(200, 300, "PRESS THE BUTTON TO CHARGE YOUR MAGIC POWERS", GL_WHITE);
  gl_draw_string(200, 350, "FIRST HERO TO CHARGE THEIR MAGIC POWERS WINS!", GL_WHITE);
  gl_draw_string(200, 400, "PRESS ANY BUTTON TO BEGIN", GL_WHITE);
}
void level1(int* scores){
  level1_instructions();
  gl_swap_buffer();
  button_read();
  set_countdown();
  while(!isEmpty(1)){
    returnButton1();
  } 
  while(!isEmpty(2)){
    returnButton2();
  }
  printf("BUTTON QUEUES EMPTY");
  shouldHandleInterrupts = 1;
  int x1 = 0;
  int y1 = 50;
  int x2 = 0;
  int y2 = 400;
  int orangeXind = 0;
  int blueXind = 0;
  gl_draw_rect(blueXind * 50, y1, 50, 300, GL_BLUE);
  gl_draw_rect(orangeXind * 50, y2, 50, 300, GL_AMBER);
  gl_swap_buffer();
  while(1){
    x1 = returnButton1() / 2; //blue
    x2 = returnButton2() / 2; //orange
	if(x1 > blueXind * 50){
		gl_draw_rect(blueXind * 50, y1, 50, 300, GL_BLUE);
		gl_swap_buffer();
		gl_draw_rect(blueXind * 50, y1, 50, 300, GL_BLUE);
		gl_swap_buffer();
		blueXind++;
	}
	if(x2 > orangeXind * 50){
		gl_draw_rect(orangeXind * 50, y2, 50, 300, GL_AMBER);
		gl_swap_buffer();
		gl_draw_rect(orangeXind * 50, y2, 50, 300, GL_AMBER);
		gl_swap_buffer();
		orangeXind++;
	}
    if (x1 >= 1230 || x2 >= 1230) {
      break;
    }
  }
  scores[0] = blueXind * 50;
  scores[1] = orangeXind * 50;
  if (x1 > x2) {
    gl_draw_string(500, 370, "GAME OVER - BLUE WON!", GL_WHITE);
    scores[0] += 200;
	scores[1] += 10;
  }
  else {
    gl_draw_string(500, 370, "GAME OVER - ORANGE WON!", GL_WHITE);
    scores[1] += 200;
	scores[0] += 10;
  }
  gl_swap_buffer();
  turnOffInterrupts();
  delay(3);
}
void level2_instructions(){
	gl_draw_string(300, 200, "Welcome to level 2.", GL_WHITE);
	gl_draw_string(300, 250, "This is a competition of reaction speed.", GL_WHITE);
	gl_draw_string(300, 300, "Squares will appear on the screen periodically.", GL_WHITE);
	gl_draw_string(300, 350, "Whichever player kills the square first by pressing their button", GL_WHITE);
	gl_draw_string(300, 400, "before the other player shall earn the points for that squares.", GL_WHITE);
	gl_draw_string(300, 450, "Red enemies are standard enemies 200 pts.", GL_WHITE);
	gl_draw_string(300, 500, "Green enemies are worth double points 400 pts.", GL_WHITE);
	gl_draw_string(300, 550, "Killing a yellow friend will make you lose 600 points!", GL_WHITE);
	gl_draw_string(300, 600, "Press any button to begin", GL_WHITE);
	gl_swap_buffer();
}

void level2(int* scores){
	level2_instructions();
	button_read();
	set_countdown();
	int orangePoints = 0;
	int bluePoints = 0;
	int greenEnemy = 7;
	int greenEnemy2 = 2;
	int yellowEnemy = 4;
	int yellowEnemy2 = 6;
	int delays [10] = {1200, 1400, 1000, 2000, 1600, 1000, 1700, 2500, 1300, 1900};
	for(int i = 0; i < 10; i++){
		delay(1);
		gl_draw_rect(550, 330, 100, 100, GL_BLACK);
		gl_swap_buffer();
		int delayTime = delays[i];
		delay_ms(delayTime);
		gl_draw_rect(500, 200, 300, 50, GL_BLACK);
		gl_draw_rect(520, 250, 400, 50, GL_BLACK);
		if(i == greenEnemy || i == greenEnemy2){
			gl_draw_rect(550, 330, 100, 100, GL_GREEN);
		}
		else if(i == yellowEnemy || i == yellowEnemy2){
			gl_draw_rect(550, 330, 100, 100, GL_YELLOW);
		}
		else {
			gl_draw_rect(550, 330, 100, 100, GL_RED);
		}
		gl_swap_buffer();
		
		char player = 'x';
		turnOffInterrupts();
		shouldHandleInterrupts = 1;
		for(int i = 0; i < 3000; i++){
			if(returnButton2() != 0){
				player = '0';
				break;
			}
			else if (returnButton1() != 0){
				player = '1';
				break;
			}
			delay_ms(1);
		}
		turnOffInterrupts();
		if(player == 'x'){
			// pass
		}
		else if(player == '0') { // orange
			if(i == yellowEnemy || i == yellowEnemy2){
				orangePoints -= 600;
				gl_draw_rect(500, 200, 300, 50, GL_BLACK);
				gl_draw_string(500, 200, "ORANGE -600 POINTS", GL_AMBER);
				gl_draw_rect(520, 250, 400, 50, GL_BLACK);				
				gl_draw_string(520, 250, "KILLED FRIEND!", GL_RED);
			}
			else{
				orangePoints += 200;
				gl_draw_rect(500, 200, 300, 50, GL_BLACK);
				gl_draw_string(500, 200, "ORANGE +200 POINTS", GL_AMBER);
				if(i == greenEnemy || i == greenEnemy2){
					orangePoints += 200;
					gl_draw_rect(520, 250, 400, 50, GL_BLACK);
					gl_draw_string(540, 250, "BONUS +200", GL_GREEN);
				}
			}
		}
		else {
			if(i == yellowEnemy || i == yellowEnemy2){
				bluePoints -= 600;
				gl_draw_rect(500, 200, 300, 50, GL_BLACK);
				gl_draw_string(500, 200, "BLUE -600 POINTS", GL_BLUE);
				gl_draw_rect(520, 250, 400, 50, GL_BLACK);				
				gl_draw_string(520, 250, "KILLED FRIEND!", GL_RED);
			}
			else{
				bluePoints += 200;
				gl_draw_rect(500, 200, 300, 50, GL_BLACK);
				gl_draw_string(500, 200, "BLUE +200 POINTS", GL_BLUE);
				if(i == greenEnemy || i == greenEnemy2){
					bluePoints += 200;
					gl_draw_rect(540, 250, 300, 50, GL_BLACK);
					gl_draw_string(540, 250, "BONUS +200", GL_GREEN);
				}
			}
		}
		gl_swap_buffer();
	}
	delay(1);
	gl_clear(GL_BLACK);
	gl_draw_string(100, 50, "LEVEL 2 POINTS:", GL_WHITE);
	show_score_screen(orangePoints, bluePoints);
	button_read();
	gl_clear(GL_BLACK);
	scores[1] += orangePoints;
	scores[0] += bluePoints;
}
void level3(int* scores){

}
